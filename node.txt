Node.js works at the backend - serverside runtime -  is a runtime environment which works on a stand-alone machine, it  is related with the server side component - it has a lot of internal and external modules like the HTTP module, npm (packages and modules) - it is javascript runtime environment which uses the V8 javascript engine 

Expressjs is a framework for Node.js used for the backend for developing web side applications


Google V8 is the high-speed engine that runs JavaScript code in Google Chrome and Node.js.
🔹 It takes JavaScript code ➝ converts it to machine code (what your computer understands).
🔹 It’s written in C++ and is super fast and efficient.
🔹 It powers Node.js, letting you run JavaScript outside the browser.
✅ Think of it as the brain that makes JavaScript run lightning fast 🚀.

🌐 What is Node.js?
🔧 A runtime for JavaScript on the server-side
🔁 Before Node.js:
JavaScript was mostly used in the browser (client-side) only.

⚙️ With Node.js:
JavaScript can now run outside the browser — on a server or computer.

🧠 Think of it like this:
Concept	 -    	  Meaning
🧠 Node.js	🚂 - Engine	Runs JavaScript code on your machine (like a train engine powering code)
📡 Server-side	🌐 - Backend	Where logic, database access, and processing happen (not visible to users)
🧰 Modules	📦 - Built-in tools	http, fs, etc. help build features like websites, file access, etc.
🔄 npm	📦📦 - Package manager: Lets you install thousands of tools (like installing apps from an app store)
⚡ V8	🔥 - Google’s Engine	The same JavaScript engine Chrome uses, powers Node.js under the hood

🔽 In Simple Terms:
Node.js = 🧠 + 🔥 + 📦

🧠 It executes JavaScript code outside a browser.
🔥 It uses Google’s V8 engine (super fast).
📦 It comes with tools/modules to build backend systems.

🚀 What is Express.js?
Express.js is a framework built on top of Node.js.
Concept	Symbol	Meaning
Express.js	🏗️ Blueprint	Helps you build backend systems faster and easier
Based on Node.js	🧠🔧	Uses all of Node's power, just with helpful shortcuts
Build web apps	🖥️🌐	Helps create APIs, web servers, handle forms, etc.

🧩 Express + Node Together:
Tool	-	Role
Node.js	🚂	The engine that runs JavaScript on the server
Express.js	🛠️	The toolkit to build web applications easily

🧠 Analogy:
Node.js = A car engine (🚗🔧)
Express.js = The steering wheel, dashboard, and controls (🛠️🧭)
You can drive the car with just the engine, but Express makes it smooth and comfortable

Node.js provides with features like Non-Blocking I/O, npm
NPM - Node Package Manager 

A server is a computer or software that listens for and responds to requests—usually from web browsers or other devices.
🧠 In simple terms:
A server is like a waiter at a restaurant. You (the client) ask for something (like a webpage), and the server brings it to you.

How to handle diff request is dependent on the routing concept 

------------------------------------------------------------
✅ req.query.id
Comes from the query string in the URL (after a ?)

Example URL:
http://localhost:9000/alien?id=007

How to get the ID:
req.query.id → returns "007"

📌 Think of query as asking something by attaching extra info to the URL.

✅ req.params.id
Comes from the URL path itself (defined with :id in your route)

Example URL:
http://localhost:9000/alien/007

How to get the ID:
req.params.id → returns "007"

📌 Think of params as capturing a part of the URL like a placeholder.

------------------------------------------------------
🧠 REPL (Read–Eval–Print Loop) – Concise Explanation:
REPL is an interactive environment that lets you:

Read: take user input (JavaScript code),
Eval: evaluate the code,
Print: show the result,
Loop: repeat the process.

🟢 Used in Node.js to quickly test and run JavaScript code line by line in the terminal.

Think of it like a live JavaScript playground in your command line.

------------------------------------------------------
✅ When we install Node.js, we automatically get npm (Node Package Manager)

📦 What does npm allow us to do?
🔁 Reuse our own code in other projects
📥 Use code written by other developers
📤 Share our code with other developers

🧩 In npm terms:
A package is reusable code
A package is just a 📁 folder that contains:

✅ JavaScript code
📚 Modules
🔗 Dependencies


---------------------------------------------
/* 
 🧰 NPM Essentials — Explained with Symbols

 🔧 NPM (Node Package Manager)
     - Comes pre-installed with Node.js

 🌍 Check npm version:
     npm -v

---------------------------------------

 📦 Installing Packages

 🔹 Local Dependency — for this project only:
     npm install <package-name>
     OR
     npm i <package-name>

 🔹 Global Dependency — use anywhere on your system:
     npm install -g <package-name>         // Windows/Linux
     sudo npm install -g <package-name>    // macOS (requires admin)

---------------------------------------

 📄 package.json — The Project Manifest

 Stores:
     📛 Project name
     🧾 Version
     📚 Description
     🔗 Dependencies
     👤 Author
     🔧 Scripts

 🛠️ Ways to create it:
     ✍️ Manual - Create file & add details manually
     ⚙️ npm init     // Guided step-by-step setup
     ⚡ npm init -y  // Auto-create with default values

 💡 To install a package and save it as a dependency:
     npm install <package-name>

---------------------------------------

 📌 Why package.json matters:
     - Describes your project
     - Lists all dependencies
     - Makes collaboration and reinstallation easier
*/
